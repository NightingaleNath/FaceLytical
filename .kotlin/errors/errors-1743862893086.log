kotlin version: 2.0.0
error message: org.jetbrains.kotlin.backend.common.BackendException: Backend Internal error: Exception during IR lowering
File being compiled: /Users/mharmhe/CodeLyticalHubProjects/AndroidProjects/JetpackCompose/FaceLytical/facelytical/src/main/java/com/codelytical/facelytical/ui/FaceCaptureScreen.kt
The root cause java.lang.RuntimeException was thrown at: org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate(FunctionCodegen.kt:50)
	at org.jetbrains.kotlin.backend.common.CodegenUtil.reportBackendException(CodegenUtil.kt:253)
	at org.jetbrains.kotlin.backend.common.CodegenUtil.reportBackendException$default(CodegenUtil.kt:236)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invokeSequential(performByIrFile.kt:65)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invoke(performByIrFile.kt:52)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invoke(performByIrFile.kt:38)
	at org.jetbrains.kotlin.backend.common.phaser.NamedCompilerPhase.phaseBody(CompilerPhase.kt:166)
	at org.jetbrains.kotlin.backend.common.phaser.AbstractNamedCompilerPhase.invoke(CompilerPhase.kt:113)
	at org.jetbrains.kotlin.backend.common.phaser.CompositePhase.invoke(PhaseBuilders.kt:29)
	at org.jetbrains.kotlin.backend.common.phaser.CompositePhase.invoke(PhaseBuilders.kt:16)
	at org.jetbrains.kotlin.backend.common.phaser.NamedCompilerPhase.phaseBody(CompilerPhase.kt:166)
	at org.jetbrains.kotlin.backend.common.phaser.AbstractNamedCompilerPhase.invoke(CompilerPhase.kt:113)
	at org.jetbrains.kotlin.backend.common.phaser.CompilerPhaseKt.invokeToplevel(CompilerPhase.kt:62)
	at org.jetbrains.kotlin.backend.jvm.JvmIrCodegenFactory.invokeCodegen(JvmIrCodegenFactory.kt:371)
	at org.jetbrains.kotlin.codegen.CodegenFactory.generateModule(CodegenFactory.kt:47)
	at org.jetbrains.kotlin.backend.jvm.JvmIrCodegenFactory.generateModuleInFrontendIRMode(JvmIrCodegenFactory.kt:433)
	at org.jetbrains.kotlin.cli.jvm.compiler.pipeline.JvmCompilerPipelineKt.generateCodeFromIr(jvmCompilerPipeline.kt:241)
	at org.jetbrains.kotlin.cli.jvm.compiler.pipeline.JvmCompilerPipelineKt.compileModulesUsingFrontendIrAndLightTree(jvmCompilerPipeline.kt:140)
	at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecute(K2JVMCompiler.kt:155)
	at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecute(K2JVMCompiler.kt:50)
	at org.jetbrains.kotlin.cli.common.CLICompiler.execImpl(CLICompiler.kt:104)
	at org.jetbrains.kotlin.cli.common.CLICompiler.execImpl(CLICompiler.kt:48)
	at org.jetbrains.kotlin.cli.common.CLITool.exec(CLITool.kt:101)
	at org.jetbrains.kotlin.incremental.IncrementalJvmCompilerRunner.runCompiler(IncrementalJvmCompilerRunner.kt:453)
	at org.jetbrains.kotlin.incremental.IncrementalJvmCompilerRunner.runCompiler(IncrementalJvmCompilerRunner.kt:62)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.doCompile(IncrementalCompilerRunner.kt:506)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileImpl(IncrementalCompilerRunner.kt:423)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileNonIncrementally(IncrementalCompilerRunner.kt:301)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compile(IncrementalCompilerRunner.kt:129)
	at org.jetbrains.kotlin.daemon.CompileServiceImplBase.execIncrementalCompiler(CompileServiceImpl.kt:676)
	at org.jetbrains.kotlin.daemon.CompileServiceImplBase.access$execIncrementalCompiler(CompileServiceImpl.kt:92)
	at org.jetbrains.kotlin.daemon.CompileServiceImpl.compile(CompileServiceImpl.kt:1661)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)
	at java.base/java.lang.reflect.Method.invoke(Unknown Source)
	at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(Unknown Source)
	at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)
	at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)
	at java.base/java.security.AccessController.doPrivileged(Unknown Source)
	at java.rmi/sun.rmi.transport.Transport.serviceCall(Unknown Source)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(Unknown Source)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(Unknown Source)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(Unknown Source)
	at java.base/java.security.AccessController.doPrivileged(Unknown Source)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(Unknown Source)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.base/java.lang.Thread.run(Unknown Source)
Caused by: java.lang.RuntimeException: Exception while generating code for:
FUN name:FaceCaptureScreen visibility:public modality:FINAL <> (onImageCaptured:kotlin.Function1<android.graphics.Bitmap, kotlin.Unit>, onCaptureError:kotlin.Function1<java.lang.Exception, kotlin.Unit>, onPermissionDenied:kotlin.Function0<kotlin.Unit>, onCustomerSupportClick:kotlin.Function0<kotlin.Unit>, onBackPressed:kotlin.Function0<kotlin.Unit>, modifier:androidx.compose.ui.Modifier) returnType:kotlin.Unit
  annotations:
    OptIn(markerClass = [CLASS_REFERENCE 'CLASS IR_EXTERNAL_DECLARATION_STUB ANNOTATION_CLASS name:ExperimentalMaterial3Api modality:OPEN visibility:public superTypes:[kotlin.Annotation]' type=kotlin.reflect.KClass<androidx.compose.material3.ExperimentalMaterial3Api>])
    Composable
  VALUE_PARAMETER name:onImageCaptured index:0 type:kotlin.Function1<android.graphics.Bitmap, kotlin.Unit>
  VALUE_PARAMETER name:onCaptureError index:1 type:kotlin.Function1<java.lang.Exception, kotlin.Unit>
  VALUE_PARAMETER name:onPermissionDenied index:2 type:kotlin.Function0<kotlin.Unit>
  VALUE_PARAMETER name:onCustomerSupportClick index:3 type:kotlin.Function0<kotlin.Unit>
  VALUE_PARAMETER name:onBackPressed index:4 type:kotlin.Function0<kotlin.Unit>
    EXPRESSION_BODY
      ERROR_EXPR 'Default Stub' type=kotlin.Function0<kotlin.Unit>
  VALUE_PARAMETER name:modifier index:5 type:androidx.compose.ui.Modifier
    EXPRESSION_BODY
      ERROR_EXPR 'Default Stub' type=androidx.compose.ui.Modifier
  BLOCK_BODY
    VAR name:context type:android.content.Context [val]
      CALL 'public final fun <get-current> (): T of androidx.compose.runtime.CompositionLocal [inline] declared in androidx.compose.runtime.CompositionLocal' type=android.content.Context origin=GET_PROPERTY
        $this: TYPE_OP type=androidx.compose.runtime.CompositionLocal<T of androidx.compose.runtime.CompositionLocal> origin=IMPLICIT_CAST typeOperand=androidx.compose.runtime.CompositionLocal<T of androidx.compose.runtime.CompositionLocal>
          CALL 'public final fun <get-LocalContext> (): androidx.compose.runtime.ProvidableCompositionLocal<android.content.Context> declared in androidx.compose.ui.platform.AndroidCompositionLocals_androidKt' type=androidx.compose.runtime.ProvidableCompositionLocal<android.content.Context> origin=GET_PROPERTY
    VAR name:cameraManager type:com.codelytical.facelytical.camera.CameraManager [val]
      CALL 'public final fun remember <T> (calculation: @[DisallowComposableCalls] kotlin.Function0<T of androidx.compose.runtime.ComposablesKt.remember>): T of androidx.compose.runtime.ComposablesKt.remember [inline] declared in androidx.compose.runtime.ComposablesKt' type=com.codelytical.facelytical.camera.CameraManager origin=null
        <T>: com.codelytical.facelytical.camera.CameraManager
        calculation: BLOCK type=kotlin.Function0<com.codelytical.facelytical.camera.CameraManager> origin=LAMBDA
          COMPOSITE type=kotlin.Unit origin=null
          FUNCTION_REFERENCE 'private final fun FaceCaptureScreen$lambda$1 ($context: android.content.Context): com.codelytical.facelytical.camera.CameraManager declared in com.codelytical.facelytical.ui.FaceCaptureScreenKt' type=kotlin.Function0<com.codelytical.facelytical.camera.CameraManager> origin=INLINE_LAMBDA reflectionTarget=null
            $context: GET_VAR 'val context: android.content.Context [val] declared in com.codelytical.facelytical.ui.FaceCaptureScreenKt.FaceCaptureScreen' type=android.content.Context origin=null
    VAR PROPERTY_DELEGATE name:isCapturing$delegate type:androidx.compose.runtime.MutableState<kotlin.Boolean> [val]
      CALL 'public final fun remember <T> (calculation: @[DisallowComposableCalls] kotlin.Function0<T of androidx.compose.runtime.ComposablesKt.remember>): T of androidx.compose.runtime.ComposablesKt.remember [inline] declared in androidx.compose.runtime.ComposablesKt' type=androidx.compose.runtime.MutableState<kotlin.Boolean> origin=null
        <T>: androidx.compose.runtime.MutableState<kotlin.Boolean>
        calculation: BLOCK type=kotlin.Function0<androidx.compose.runtime.MutableState<kotlin.Boolean>> origin=LAMBDA
          COMPOSITE type=kotlin.Unit origin=null
          FUNCTION_REFERENCE 'private final fun FaceCaptureScreen$lambda$2 (): androidx.compose.runtime.MutableState<kotlin.Boolean> declared in com.codelytical.facelytical.ui.FaceCaptureScreenKt' type=kotlin.Function0<androidx.compose.runtime.MutableState<kotlin.Boolean>> origin=INLINE_LAMBDA reflectionTarget=null
    VAR PROPERTY_DELEGATE name:hasPermission$delegate type:androidx.compose.runtime.MutableState<kotlin.Boolean> [val]
      CALL 'public final fun remember <T> (calculation: @[DisallowComposableCalls] kotlin.Function0<T of androidx.compose.runtime.ComposablesKt.remember>): T of androidx.compose.runtime.ComposablesKt.remember [inline] declared in androidx.compose.runtime.ComposablesKt' type=androidx.compose.runtime.MutableState<kotlin.Boolean> origin=null
        <T>: androidx.compose.runtime.MutableState<kotlin.Boolean>
        calculation: BLOCK type=kotlin.Function0<androidx.compose.runtime.MutableState<kotlin.Boolean>> origin=LAMBDA
          COMPOSITE type=kotlin.Unit origin=null
          FUNCTION_REFERENCE 'private final fun FaceCaptureScreen$lambda$5 (): androidx.compose.runtime.MutableState<kotlin.Boolean> declared in com.codelytical.facelytical.ui.FaceCaptureScreenKt' type=kotlin.Function0<androidx.compose.runtime.MutableState<kotlin.Boolean>> origin=INLINE_LAMBDA reflectionTarget=null
    VAR PROPERTY_DELEGATE name:errorMessage$delegate type:androidx.compose.runtime.MutableState<kotlin.String?> [val]
      CALL 'public final fun remember <T> (calculation: @[DisallowComposableCalls] kotlin.Function0<T of androidx.compose.runtime.ComposablesKt.remember>): T of androidx.compose.runtime.ComposablesKt.remember [inline] declared in androidx.compose.runtime.ComposablesKt' type=androidx.compose.runtime.MutableState<kotlin.String?> origin=null
        <T>: androidx.compose.runtime.MutableState<kotlin.String?>
        calculation: BLOCK type=kotlin.Function0<androidx.compose.runtime.MutableState<kotlin.String?>> origin=LAMBDA
          COMPOSITE type=kotlin.Unit origin=null
          FUNCTION_REFERENCE 'private final fun FaceCaptureScreen$lambda$8 (): androidx.compose.runtime.MutableState<kotlin.String?> declared in com.codelytical.facelytical.ui.FaceCaptureScreenKt' type=kotlin.Function0<androidx.compose.runtime.MutableState<kotlin.String?>> origin=INLINE_LAMBDA reflectionTarget=null
    VAR PROPERTY_DELEGATE name:isFaceDetected$delegate type:androidx.compose.runtime.State<kotlin.Boolean> [val]
      TYPE_OP type=androidx.compose.runtime.State<kotlin.Boolean> origin=IMPLICIT_CAST typeOperand=androidx.compose.runtime.State<kotlin.Boolean>
        CALL 'public final fun collectAsState$default <T, R> (initial: R of androidx.compose.runtime.SnapshotStateKt.collectAsState$default, context: kotlin.coroutines.CoroutineContext?, $mask0: kotlin.Int, $handler: kotlin.Any?): androidx.compose.runtime.State<R of androidx.compose.runtime.SnapshotStateKt.collectAsState$default> declared in androidx.compose.runtime.SnapshotStateKt' type=androidx.compose.runtime.State<R of androidx.compose.runtime.SnapshotStateKt.collectAsState$default> origin=DEFAULT_DISPATCH_CALL
          <T>: kotlin.Boolean
          <R>: kotlin.Boolean
          $receiver: CALL 'public final fun <get-isFaceDetected> (): kotlinx.coroutines.flow.StateFlow<kotlin.Boolean> declared in com.codelytical.facelytical.camera.CameraManager' type=kotlinx.coroutines.flow.StateFlow<kotlin.Boolean> origin=GET_PROPERTY
            $this: GET_VAR 'val cameraManager: com.codelytical.facelytical.camera.CameraManager [val] declared in com.codelytical.facelytical.ui.FaceCaptureScreenKt.FaceCaptureScreen' type=com.codelytical.facelytical.camera.CameraManager origin=null
          initial: CONST Boolean type=kotlin.Boolean value=false
          context: COMPOSITE type=kotlin.coroutines.CoroutineContext? origin=DEFAULT_VALUE
            CONST Null type=kotlin.coroutines.CoroutineContext? value=null
          $mask0: CONST Int type=kotlin.Int value=2
          $handler: CONST Null type=kotlin.Any? value=null
    CALL 'public final fun Column$default (modifier: androidx.compose.ui.Modifier?, verticalArrangement: androidx.compose.foundation.layout.Arrangement.Vertical?, horizontalAlignment: androidx.compose.ui.Alignment.Horizontal?, content: @[Composable] @[ExtensionFunctionType] kotlin.Function1<androidx.compose.foundation.layout.ColumnScope, kotlin.Unit>, $mask0: kotlin.Int, $handler: kotlin.Any?): kotlin.Unit [inline] declared in androidx.compose.foundation.layout.ColumnKt' type=kotlin.Unit origin=DEFAULT_DISPATCH_CALL
      modifier: CALL 'public final fun fillMaxSize$default (fraction: kotlin.Float, $mask0: kotlin.Int, $handler: kotlin.Any?): androidx.compose.ui.Modifier declared in androidx.compose.foundation.layout.SizeKt' type=androidx.compose.ui.Modifier origin=DEFAULT_DISPATCH_CALL
        $receiver: GET_VAR 'modifier: androidx.compose.ui.Modifier declared in com.codelytical.facelytical.ui.FaceCaptureScreenKt.FaceCaptureScreen' type=androidx.compose.ui.Modifier origin=null
        fraction: COMPOSITE type=kotlin.Float origin=DEFAULT_VALUE
          CONST Float type=kotlin.Float value=0.0
        $mask0: CONST Int type=kotlin.Int value=1
        $handler: CONST Null type=kotlin.Any? value=null
      verticalArrangement: COMPOSITE type=androidx.compose.foundation.layout.Arrangement.Vertical? origin=DEFAULT_VALUE
        CONST Null type=androidx.compose.foundation.layout.Arrangement.Vertical? value=null
      horizontalAlignment: COMPOSITE type=androidx.compose.ui.Alignment.Horizontal? origin=DEFAULT_VALUE
        CONST Null type=androidx.compose.ui.Alignment.Horizontal? value=null
      content: BLOCK type=@[ExtensionFunctionType] kotlin.Function1<androidx.compose.foundation.layout.ColumnScope, kotlin.Unit> origin=LAMBDA
        COMPOSITE type=kotlin.Unit origin=null
        FUNCTION_REFERENCE 'private final fun FaceCaptureScreen$lambda$25 ($onBackPressed: kotlin.Function0<kotlin.Unit>, $cameraManager: com.codelytical.facelytical.camera.CameraManager, $onCaptureError: kotlin.Function1<java.lang.Exception, kotlin.Unit>, $errorMessage$delegate: androidx.compose.runtime.MutableState<kotlin.String?>, $isFaceDetected$delegate: androidx.compose.runtime.State<kotlin.Boolean>, $isCapturing$delegate: androidx.compose.runtime.MutableState<kotlin.Boolean>, $onImageCaptured: kotlin.Function1<android.graphics.Bitmap, kotlin.Unit>): kotlin.Unit declared in com.codelytical.facelytical.ui.FaceCaptureScreenKt' type=@[ExtensionFunctionType] kotlin.Function1<androidx.compose.foundation.layout.ColumnScope, kotlin.Unit> origin=INLINE_LAMBDA reflectionTarget=null
          $onBackPressed: GET_VAR 'onBackPressed: kotlin.Function0<kotlin.Unit> declared in com.codelytical.facelytical.ui.FaceCaptureScreenKt.FaceCaptureScreen' type=kotlin.Function0<kotlin.Unit> origin=null
          $cameraManager: GET_VAR 'val cameraManager: com.codelytical.facelytical.camera.CameraManager [val] declared in com.codelytical.facelytical.ui.FaceCaptureScreenKt.FaceCaptureScreen' type=com.codelytical.facelytical.camera.CameraManager origin=null
          $onCaptureError: GET_VAR 'onCaptureError: kotlin.Function1<java.lang.Exception, kotlin.Unit> declared in com.codelytical.facelytical.ui.FaceCaptureScreenKt.FaceCaptureScreen' type=kotlin.Function1<java.lang.Exception, kotlin.Unit> origin=null
          $errorMessage$delegate: GET_VAR 'val errorMessage$delegate: androidx.compose.runtime.MutableState<kotlin.String?> [val] declared in com.codelytical.facelytical.ui.FaceCaptureScreenKt.FaceCaptureScreen' type=androidx.compose.runtime.MutableState<kotlin.String?> origin=null
          $isFaceDetected$delegate: GET_VAR 'val isFaceDetected$delegate: androidx.compose.runtime.State<kotlin.Boolean> [val] declared in com.codelytical.facelytical.ui.FaceCaptureScreenKt.FaceCaptureScreen' type=androidx.compose.runtime.State<kotlin.Boolean> origin=null
          $isCapturing$delegate: GET_VAR 'val isCapturing$delegate: androidx.compose.runtime.MutableState<kotlin.Boolean> [val] declared in com.codelytical.facelytical.ui.FaceCaptureScreenKt.FaceCaptureScreen' type=androidx.compose.runtime.MutableState<kotlin.Boolean> origin=null
          $onImageCaptured: GET_VAR 'onImageCaptured: kotlin.Function1<android.graphics.Bitmap, kotlin.Unit> declared in com.codelytical.facelytical.ui.FaceCaptureScreenKt.FaceCaptureScreen' type=kotlin.Function1<android.graphics.Bitmap, kotlin.Unit> origin=null
      $mask0: CONST Int type=kotlin.Int value=6
      $handler: CONST Null type=kotlin.Any? value=null

	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate(FunctionCodegen.kt:50)
	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate$default(FunctionCodegen.kt:42)
	at org.jetbrains.kotlin.backend.jvm.codegen.ClassCodegen.generateMethodNode(ClassCodegen.kt:385)
	at org.jetbrains.kotlin.backend.jvm.codegen.ClassCodegen.generateMethod(ClassCodegen.kt:402)
	at org.jetbrains.kotlin.backend.jvm.codegen.ClassCodegen.generate(ClassCodegen.kt:169)
	at org.jetbrains.kotlin.backend.jvm.FileCodegen.lower(JvmPhases.kt:41)
	at org.jetbrains.kotlin.backend.common.phaser.PhaseBuildersKt.makeIrFilePhase$lambda$5(PhaseBuilders.kt:114)
	at org.jetbrains.kotlin.backend.common.phaser.PhaseBuildersKt$createSimpleNamedCompilerPhase$1.phaseBody(PhaseBuilders.kt:71)
	at org.jetbrains.kotlin.backend.common.phaser.SimpleNamedCompilerPhase.phaseBody(CompilerPhase.kt:226)
	at org.jetbrains.kotlin.backend.common.phaser.AbstractNamedCompilerPhase.invoke(CompilerPhase.kt:113)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invokeSequential(performByIrFile.kt:62)
	... 43 more
Caused by: org.jetbrains.kotlin.codegen.CompilationException: Back-end (JVM) Internal error: Couldn't inline method call: CALL 'public final fun <get-current> (): T of androidx.compose.runtime.CompositionLocal [inline] declared in androidx.compose.runtime.CompositionLocal' type=android.content.Context origin=GET_PROPERTY
Method: null
File is unknown
The root cause java.lang.IllegalStateException was thrown at: org.jetbrains.kotlin.codegen.inline.SourceCompilerForInlineKt.getMethodNode(SourceCompilerForInline.kt:118)
	at org.jetbrains.kotlin.codegen.inline.InlineCodegen.performInline(InlineCodegen.kt:65)
	at org.jetbrains.kotlin.backend.jvm.codegen.IrInlineCodegen.genInlineCall(IrInlineCodegen.kt:162)
	at org.jetbrains.kotlin.backend.jvm.codegen.IrInlineCallGenerator.genCall(IrInlineCallGenerator.kt:36)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitCall(ExpressionCodegen.kt:647)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitCall(ExpressionCodegen.kt:137)
	at org.jetbrains.kotlin.ir.expressions.IrCall.accept(IrCall.kt:24)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitVariable(ExpressionCodegen.kt:784)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitVariable(ExpressionCodegen.kt:137)
	at org.jetbrains.kotlin.ir.declarations.IrVariable.accept(IrVariable.kt:36)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitStatementContainer(ExpressionCodegen.kt:573)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitBlockBody(ExpressionCodegen.kt:578)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.visitBlockBody(ExpressionCodegen.kt:137)
	at org.jetbrains.kotlin.ir.expressions.IrBlockBody.accept(IrBlockBody.kt:20)
	at org.jetbrains.kotlin.backend.jvm.codegen.ExpressionCodegen.generate(ExpressionCodegen.kt:239)
	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.doGenerate(FunctionCodegen.kt:121)
	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate(FunctionCodegen.kt:46)
	... 53 more
Caused by: java.lang.IllegalStateException: couldn't find inline method Landroidx/compose/runtime/CompositionLocal;.getCurrent()Ljava/lang/Object;
	at org.jetbrains.kotlin.codegen.inline.SourceCompilerForInlineKt.getMethodNode(SourceCompilerForInline.kt:118)
	at org.jetbrains.kotlin.codegen.inline.SourceCompilerForInlineKt.loadCompiledInlineFunction(SourceCompilerForInline.kt:96)
	at org.jetbrains.kotlin.backend.jvm.codegen.IrSourceCompilerForInline.compileInlineFunction(IrSourceCompilerForInline.kt:91)
	at org.jetbrains.kotlin.codegen.inline.InlineCodegen.compileInline(InlineCodegen.kt:43)
	at org.jetbrains.kotlin.codegen.inline.InlineCodegen.performInline(InlineCodegen.kt:51)
	... 68 more


